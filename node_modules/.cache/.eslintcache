[{"C:\\Users\\Romeo\\Documents\\GitHub\\ai-react\\src\\index.js":"1","C:\\Users\\Romeo\\Documents\\GitHub\\ai-react\\src\\App.js":"2"},{"size":503,"mtime":1684056002684,"results":"3","hashOfConfig":"4"},{"size":10318,"mtime":1684670501427,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uujlv6",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"C:\\Users\\Romeo\\Documents\\GitHub\\ai-react\\src\\index.js",[],[],"C:\\Users\\Romeo\\Documents\\GitHub\\ai-react\\src\\App.js",["13","14"],[],"import React from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Route, Routes, useNavigate } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst Dictaphone = () => {\n  const [response, setResponse] = useState(\"\");\n  const [voice, setVoice] = useState(null);\n  const [password, setPassword] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [voiceStatus, setVoiceStatus] = useState(true);\n\n  const { data: users, isFetched } = useQuery([\"Users\"], async () => {\n    const request = await fetch(\"http://localhost:3001/getHistory\");\n    const response = await request.json();\n    return response;\n  });\n\n  const navigate = useNavigate();\n\n  if (isFetched) {\n    console.log(users);\n  }\n\n  useEffect(() => {\n    !sessionStorage.getItem(\"UserID\")\n      ? navigate(\"/login\")\n      : console.log(\"UserID Acquired\");\n  }, []);\n\n  const inputRef = useRef();\n\n   let {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  useEffect(() => {\n    if(!voice){\n      setVoice(transcript)\n    }\n  }, [listening])\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n  const register = async () => {\n    const userCheck = users.filter((user) => {\n      return user.username === username;\n    })[0];\n    console.log(userCheck);\n    if (!userCheck) {\n      try {\n        await fetch(\"http://localhost:3001/postUser\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            username: username,\n            history: [],\n            password: password,\n          }),\n        });\n        alert(\"User registered\");\n      } catch (error) {\n        alert(error);\n      }\n    } else {\n      alert(\"User already registered\");\n    }\n  };\n\n  const login = () => {\n    const findUser = users.filter((user) => {\n      return user.username === username;\n    });\n    if (findUser[0]) {\n      if (findUser[0].password === password) {\n        alert(\"logging in\");\n        sessionStorage.setItem(\"UserID\", findUser[0]._id);\n        navigate(\"/\");\n        setPassword(null)\n        setUsername(null)\n      } else {\n        alert(\"invalid password\");\n      }\n    } else {\n      alert(\"User not found\");\n    }\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem(\"UserID\");\n    navigate(\"/login\");\n  };\n\n  const inputCheck = (fnc) => {\n    if (password === null) {\n      alert(\"Please enter a valid Password\");\n    } else if (username === null) {\n      alert(\"Please enter a valid Username\");\n    } else {\n      fnc();\n    }\n  };\n\n  const createHistory = async (prompt, response) => {\n    const d = new Date();\n    if (users) {\n      const userHistory = users.filter((user) => {\n        return user._id === sessionStorage.getItem(\"UserID\");\n      })[0].history;\n      const temp = [\n        ...userHistory,\n        {\n          prompt: prompt,\n          response: response,\n          date: `${d.getMonth()}/${d.getDay()}/${d.getFullYear()}`,\n        },\n      ];\n      await fetch(\"http://localhost:3001/postHistory\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          _id: sessionStorage.getItem(\"UserID\"),\n          history: temp,\n        }),\n      });\n    }\n  };\n\n  const callGPT = async () => {\n    const prompt = \"\";\n\n    const request = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization:\n          \"Bearer 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\",\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        max_tokens: 500,\n        messages: [\n          {\n            role: \"system\",\n            content: prompt,\n          },\n          {\n            role: \"user\",\n            content: voice,\n          },\n        ],\n      }),\n    });\n    const data = await request.json();\n    const responseText =\n      data.choices && data.choices.length > 0\n        ? data.choices[0].message.content\n        : \"No response from God.\";\n    setResponse(responseText);\n    let audio = new Audio(`http://localhost:3001/speech?text=${responseText}`);\n    if (voiceStatus) {\n      audio.play();\n    }\n    inputRef.current.value = \"\";\n    createHistory(voice, responseText);\n    console.log(responseText);\n  };\n\n  return (\n    <>\n      <Routes>\n        <Route\n          path={\"/login\"}\n          element={\n            <>\n              <div>\n                <input\n                  placeholder=\"username\"\n                  onChange={(e) => {\n                    setUsername(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div>\n                <input\n                  placeholder=\"password\"\n                  onChange={(e) => {\n                    setPassword(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div>\n                <button\n                  onClick={() => {\n                    inputCheck(login);\n                  }}\n                  disabled={username && password ? false : true}\n                >\n                  Login\n                </button>\n                <button\n                  onClick={() => {\n                    inputCheck(register);\n                  }}\n                  disabled={username && password ? false : true}\n                >\n                  Register\n                </button>\n              </div>\n            </>\n          }\n        />\n        <Route\n          path=\"/\"\n          element={\n            <div>\n              <div>\n                <p>\n                  Welcome,{\" \"}\n                  {users\n                    ? users.filter((user) => {\n                        return user._id === sessionStorage.getItem(\"UserID\");\n                      })[0]?.username\n                    : null}\n                  .\n                </p>\n              </div>\n              <div>\n                <p style={{ color: listening ? \"green\" : \"red\" }}>\n                  Microphone: {listening ? \"on\" : \"off\"}\n                </p>\n              </div>\n              <div>\n                <p style={{ color: voiceStatus ? \"green\" : \"red\" }}>\n                  AI Voice: {voiceStatus ? \"On\" : \"Off\"}\n                </p>\n              </div>\n              <div>\n                <textarea\n                  style={{ height: \"230px\", width: \"500px\" }}\n                  placeholder=\"Type here or click record\"\n                  onChange={(e) => {\n                    setVoice(e.target.value);\n                  }}\n                  ref={inputRef}\n                ></textarea>\n              </div>\n              <div>\n                <button\n                  onClick={() => {\n                    if (voice) {\n                      setVoice(null);\n                      SpeechRecognition.startListening();\n                    } \n                  }}\n                >\n                  Record\n                </button>\n                <button\n                  onClick={() => {\n                    SpeechRecognition.stopListening();\n                    setVoice(transcript);\n                  }}\n                >\n                  Stop\n                </button>\n                <button\n                  onClick={() => {\n                    resetTranscript();\n                    setResponse(null);\n                    setVoice(null);\n                    inputRef.current.value = null;\n                  }}\n                >\n                  Reset\n                </button>\n                <button\n                  onClick={() => {\n                    SpeechRecognition.stopListening();\n                    callGPT();\n                  }}\n                >\n                  Ask\n                </button>\n                <button\n                  onClick={() => {\n                    voiceStatus ? setVoiceStatus(false) : setVoiceStatus(true);\n                  }}\n                >\n                  Toggle Voice\n                </button>\n                <button\n                  onClick={() => {\n                    navigate(\"/history\");\n                  }}\n                >\n                  History\n                </button>\n                <button onClick={logout}>Logout</button>\n              </div>\n              <div style={{ backgroundColor: \"rgb(191, 186, 186)\" }}>\n                <p>{voice ? `User: ${voice}` : \"No request\"}</p>\n                <p>{response ? `AI: ${response}` : \"No response\"}</p>\n              </div>\n            </div>\n          }\n        />\n        <Route\n          path=\"/history\"\n          element={\n            <>\n              <h2>User History</h2>\n              <div\n                style={{\n                  backgroundColor: \"rgb(191, 186, 186)\",\n                }}\n              >\n                {users && users.length !== 0 ? (\n                  users\n                    .filter((user) => {\n                      return user._id === sessionStorage.getItem(\"UserID\");\n                    })[0]\n                    ?.history.map((item, key) => {\n                      return (\n                        <div key={key} style={{ marginBottom: \"50px\" }}>\n                          <p>\n                            User:{\" \"}\n                            {users\n                              ? users.filter((user) => {\n                                  return (\n                                    user._id ===\n                                    sessionStorage.getItem(\"UserID\")\n                                  );\n                                })[0]?.username\n                              : null}\n                          </p>\n                          <p>Prompt: {item.prompt}</p>\n                          <p>Response: {item.response}</p>\n                          <p>Date: {item.date}</p>\n                        </div>\n                      );\n                    })\n                ) : (\n                  <p>No History Available</p>\n                )}\n              </div>\n            </>\n          }\n        ></Route>\n      </Routes>\n    </>\n  );\n};\n\nexport default Dictaphone;\n",{"ruleId":"15","severity":1,"message":"16","line":32,"column":6,"nodeType":"17","endLine":32,"endColumn":8,"suggestions":"18"},{"ruleId":"15","severity":1,"message":"19","line":47,"column":6,"nodeType":"17","endLine":47,"endColumn":17,"suggestions":"20"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["21"],"React Hook useEffect has missing dependencies: 'transcript' and 'voice'. Either include them or remove the dependency array.",["22"],{"desc":"23","fix":"24"},{"desc":"25","fix":"26"},"Update the dependencies array to be: [navigate]",{"range":"27","text":"28"},"Update the dependencies array to be: [listening, transcript, voice]",{"range":"29","text":"30"},[981,983],"[navigate]",[1221,1232],"[listening, transcript, voice]"]